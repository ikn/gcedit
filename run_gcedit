#! /usr/bin/env python

# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.

import sys
import os
from platform import system
from distutils import sysconfig

#_LIB_PREFIX = '/usr/local'
#sys.path.append(sysconfig.get_python_lib(prefix = _LIB_PREFIX))

from gcedit import conf, qt, loader

# add the standard icon theme paths, since Qt doesn't seem to
data_dirs = os.environ.get('XDG_DATA_DIRS', '/usr/local/share/:/usr/share/')
qt.QIcon.setThemeSearchPaths(
    qt.QIcon.themeSearchPaths() +
    [os.path.expanduser(os.path.join('~', '.icons'))] +
    [os.path.join(d, 'icons') for d in data_dirs.split(':')] +
    # application icon for running in-place
    [os.path.join(os.path.dirname(sys.argv[0]), 'icons')]
)
# if there's no theme name, no icon lookups are performed (not even in hicolor)
if not qt.QIcon.themeName():
    qt.QIcon.setThemeName('gcedit' if system() == 'Windows' else 'gnome')

if __name__ == '__main__':
    app = qt.QApplication([])
    app.setApplicationName(conf.APPLICATION)
    app.setApplicationVersion(conf.VERSION)
    app.setWindowIcon(qt.QIcon.fromTheme(conf.IDENTIFIER))
    main_window = None

    # PyQt doesn't store the window, so Python destroys it
    def set_main_window (w):
        global main_window
        main_window = w

    if len(sys.argv) > 1:
        # use the first argument as a filename to load
        loader.load(sys.argv[1], set_main_window)
    else:
        # ask for a disk image
        loader.run(set_main_window)

    app.exec()
